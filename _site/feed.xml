<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en_US"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://0.0.0.0:4001/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4001/" rel="alternate" type="text/html" hreflang="en_US" /><updated>2025-07-30T17:16:26+02:00</updated><id>http://0.0.0.0:4001/feed.xml</id><title type="html">Matteo Ricci - Full Stack Developer</title><subtitle>Full Stack Developer specializing in Django, React, Python, and Web3 technologies. Building innovative educational platforms and smart contract solutions.</subtitle><author><name>Matteo Ricci</name></author><entry><title type="html">Building Modern Web Applications with Django and React</title><link href="http://0.0.0.0:4001/blog/2025/07/30/django-react-tutorial/" rel="alternate" type="text/html" title="Building Modern Web Applications with Django and React" /><published>2025-07-30T00:00:00+02:00</published><updated>2025-07-30T00:00:00+02:00</updated><id>http://0.0.0.0:4001/blog/2025/07/30/django-react-tutorial</id><content type="html" xml:base="http://0.0.0.0:4001/blog/2025/07/30/django-react-tutorial/"><![CDATA[<p>Building modern web applications requires a careful balance between robust backend architecture and intuitive user interfaces. In this comprehensive guide, we’ll explore how to combine Django’s powerful backend capabilities with React’s dynamic frontend to create scalable, maintainable applications.</p>

<h2 id="why-django--react">Why Django + React?</h2>

<p>The combination of Django and React has become increasingly popular among developers for several compelling reasons:</p>

<ul>
  <li><strong>Django</strong>: Provides a robust, batteries-included backend framework</li>
  <li><strong>React</strong>: Offers a flexible, component-based frontend library</li>
  <li><strong>Separation of Concerns</strong>: Clear division between API and UI logic</li>
  <li><strong>Scalability</strong>: Both technologies scale well for enterprise applications</li>
</ul>

<h2 id="setting-up-the-development-environment">Setting Up the Development Environment</h2>

<p>Before we dive into code, let’s set up our development environment properly.</p>

<h3 id="backend-setup-django">Backend Setup (Django)</h3>

<p>First, create a new virtual environment and install Django:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python <span class="nt">-m</span> venv venv
<span class="nb">source </span>venv/bin/activate  <span class="c"># On Windows: venv\Scripts\activate</span>
pip <span class="nb">install </span>django djangorestframework django-cors-headers
</code></pre></div></div>

<p>Create a new Django project:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">django</span><span class="o">-</span><span class="n">admin</span> <span class="n">startproject</span> <span class="n">myproject</span>
<span class="n">cd</span> <span class="n">myproject</span>
<span class="n">python</span> <span class="n">manage</span><span class="p">.</span><span class="n">py</span> <span class="n">startapp</span> <span class="n">api</span>
</code></pre></div></div>

<h3 id="frontend-setup-react">Frontend Setup (React)</h3>

<p>In a separate directory, create a new React application:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx create-react-app frontend
<span class="nb">cd </span>frontend
npm <span class="nb">install </span>axios react-router-dom
</code></pre></div></div>

<h2 id="building-the-django-api">Building the Django API</h2>

<p>Let’s start by creating a simple API endpoint. In your Django app, create a model:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># api/models.py
</span><span class="kn">from</span> <span class="n">django.db</span> <span class="kn">import</span> <span class="n">models</span>

<span class="k">class</span> <span class="nc">Article</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">title</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
    <span class="n">content</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">TextField</span><span class="p">()</span>
    <span class="n">author</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
    <span class="n">created_at</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">DateTimeField</span><span class="p">(</span><span class="n">auto_now_add</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">updated_at</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">DateTimeField</span><span class="p">(</span><span class="n">auto_now</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">title</span>

    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">ordering</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">-created_at</span><span class="sh">'</span><span class="p">]</span>
</code></pre></div></div>

<p>Create a serializer for the API:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># api/serializers.py
</span><span class="kn">from</span> <span class="n">rest_framework</span> <span class="kn">import</span> <span class="n">serializers</span>
<span class="kn">from</span> <span class="n">.models</span> <span class="kn">import</span> <span class="n">Article</span>

<span class="k">class</span> <span class="nc">ArticleSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="p">.</span><span class="n">ModelSerializer</span><span class="p">):</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Article</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="sh">'</span><span class="s">__all__</span><span class="sh">'</span>
</code></pre></div></div>

<h2 id="implementing-the-react-frontend">Implementing the React Frontend</h2>

<p>Now let’s create a React component to display our articles:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// src/components/ArticleList.js</span>
<span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useState</span><span class="p">,</span> <span class="nx">useEffect</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">axios</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">axios</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">ArticleList</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">articles</span><span class="p">,</span> <span class="nx">setArticles</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">([]);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">loading</span><span class="p">,</span> <span class="nx">setLoading</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>

  <span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">fetchArticles</span><span class="p">();</span>
  <span class="p">},</span> <span class="p">[]);</span>

  <span class="kd">const</span> <span class="nx">fetchArticles</span> <span class="o">=</span> <span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">axios</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://localhost:8000/api/articles/</span><span class="dl">'</span><span class="p">);</span>
      <span class="nf">setArticles</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error fetching articles:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
      <span class="nf">setLoading</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="k">if </span><span class="p">(</span><span class="nx">loading</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"loading"</span><span class="p">&gt;</span>Loading articles...<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;;</span>
  <span class="p">}</span>

  <span class="k">return </span><span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"article-list"</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Latest Articles<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
      <span class="si">{</span><span class="nx">articles</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="nx">article</span> <span class="o">=&gt;</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">key</span><span class="p">=</span><span class="si">{</span><span class="nx">article</span><span class="p">.</span><span class="nx">id</span><span class="si">}</span> <span class="na">className</span><span class="p">=</span><span class="s">"article-card"</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">article</span><span class="p">.</span><span class="nx">title</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nt">p</span> <span class="na">className</span><span class="p">=</span><span class="s">"author"</span><span class="p">&gt;</span>By <span class="si">{</span><span class="nx">article</span><span class="p">.</span><span class="nx">author</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nt">p</span> <span class="na">className</span><span class="p">=</span><span class="s">"content"</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">article</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nf">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">200</span><span class="p">)</span><span class="si">}</span>...<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nt">small</span><span class="p">&gt;</span><span class="si">{</span><span class="k">new</span> <span class="nc">Date</span><span class="p">(</span><span class="nx">article</span><span class="p">.</span><span class="nx">created_at</span><span class="p">).</span><span class="nf">toLocaleDateString</span><span class="p">()</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">small</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">))</span><span class="si">}</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">ArticleList</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="best-practices-and-optimization">Best Practices and Optimization</h2>

<p>When building Django + React applications, consider these best practices:</p>

<h3 id="1-api-design">1. API Design</h3>
<ul>
  <li>Use RESTful conventions</li>
  <li>Implement proper error handling</li>
  <li>Add pagination for large datasets</li>
  <li>Use Django REST Framework’s built-in features</li>
</ul>

<h3 id="2-security-considerations">2. Security Considerations</h3>
<ul>
  <li>Configure CORS properly</li>
  <li>Implement authentication (JWT tokens)</li>
  <li>Validate all input data</li>
  <li>Use HTTPS in production</li>
</ul>

<h3 id="3-performance-optimization">3. Performance Optimization</h3>
<ul>
  <li>Implement lazy loading for components</li>
  <li>Use Django’s caching framework</li>
  <li>Optimize database queries</li>
  <li>Consider using Redis for session storage</li>
</ul>

<blockquote>
  <p><strong>Pro Tip</strong>: Always test your API endpoints before integrating with the frontend. Tools like Postman or Django’s browsable API make this process much easier.</p>
</blockquote>

<h2 id="deployment-strategies">Deployment Strategies</h2>

<p>For production deployment, consider these approaches:</p>

<table>
  <thead>
    <tr>
      <th>Strategy</th>
      <th>Pros</th>
      <th>Cons</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Separate Servers</td>
      <td>Clear separation, easier scaling</td>
      <td>More complex setup</td>
    </tr>
    <tr>
      <td>Django + React Build</td>
      <td>Simpler deployment</td>
      <td>Harder to scale frontend</td>
    </tr>
    <tr>
      <td>Docker Containers</td>
      <td>Consistent environments</td>
      <td>Additional complexity</td>
    </tr>
  </tbody>
</table>

<h2 id="conclusion">Conclusion</h2>

<p>The Django + React combination provides a powerful foundation for modern web applications. By leveraging Django’s robust backend capabilities and React’s flexible frontend framework, you can build scalable, maintainable applications that provide excellent user experiences.</p>

<p>Remember to:</p>
<ul>
  <li>Keep your API design clean and RESTful</li>
  <li>Implement proper error handling on both ends</li>
  <li>Test thoroughly before deployment</li>
  <li>Consider performance from the beginning</li>
</ul>

<p>Happy coding! 🚀</p>]]></content><author><name>Matteo Ricci</name></author><category term="Web Development" /><category term="Django" /><category term="React" /><category term="python" /><category term="javascript" /><category term="full-stack" /><category term="tutorial" /><summary type="html"><![CDATA[Learn how to build scalable, modern web applications by combining Django's robust backend capabilities with React's dynamic frontend features.]]></summary></entry><entry><title type="html">Mastering Python Performance: Tips and Tricks</title><link href="http://0.0.0.0:4001/blog/2025/07/28/python-performance-tips/" rel="alternate" type="text/html" title="Mastering Python Performance: Tips and Tricks" /><published>2025-07-28T00:00:00+02:00</published><updated>2025-07-28T00:00:00+02:00</updated><id>http://0.0.0.0:4001/blog/2025/07/28/python-performance-tips</id><content type="html" xml:base="http://0.0.0.0:4001/blog/2025/07/28/python-performance-tips/"><![CDATA[<p>Python’s simplicity and readability make it a favorite among developers, but performance optimization can be challenging. In this guide, we’ll explore proven techniques to make your Python code faster and more efficient.</p>

<h2 id="understanding-python-performance">Understanding Python Performance</h2>

<p>Before optimizing, it’s crucial to understand what affects Python performance:</p>

<ul>
  <li><strong>Global Interpreter Lock (GIL)</strong>: Limits true parallelism</li>
  <li><strong>Dynamic typing</strong>: Adds overhead compared to statically typed languages</li>
  <li><strong>Interpreted nature</strong>: Code is executed line by line</li>
  <li><strong>Memory management</strong>: Automatic garbage collection can impact performance</li>
</ul>

<h2 id="profiling-your-code">Profiling Your Code</h2>

<p>Always profile before optimizing. Python provides excellent built-in tools:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">cProfile</span>
<span class="kn">import</span> <span class="n">pstats</span>

<span class="k">def</span> <span class="nf">slow_function</span><span class="p">():</span>
    <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">100000</span><span class="p">):</span>
        <span class="n">result</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">result</span>

<span class="c1"># Profile the function
</span><span class="n">cProfile</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="sh">'</span><span class="s">slow_function()</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">profile_output</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># Analyze results
</span><span class="n">stats</span> <span class="o">=</span> <span class="n">pstats</span><span class="p">.</span><span class="nc">Stats</span><span class="p">(</span><span class="sh">'</span><span class="s">profile_output</span><span class="sh">'</span><span class="p">)</span>
<span class="n">stats</span><span class="p">.</span><span class="nf">sort_stats</span><span class="p">(</span><span class="sh">'</span><span class="s">cumulative</span><span class="sh">'</span><span class="p">)</span>
<span class="n">stats</span><span class="p">.</span><span class="nf">print_stats</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="optimization-techniques">Optimization Techniques</h2>

<h3 id="1-use-list-comprehensions">1. Use List Comprehensions</h3>

<p>List comprehensions are often faster than traditional loops:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Slow
</span><span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1000</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">result</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>

<span class="c1"># Fast
</span><span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span> <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span>
</code></pre></div></div>

<h3 id="2-leverage-built-in-functions">2. Leverage Built-in Functions</h3>

<p>Built-in functions are implemented in C and are typically faster:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Slow
</span><span class="k">def</span> <span class="nf">sum_list</span><span class="p">(</span><span class="n">numbers</span><span class="p">):</span>
    <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">:</span>
        <span class="n">total</span> <span class="o">+=</span> <span class="n">num</span>
    <span class="k">return</span> <span class="n">total</span>

<span class="c1"># Fast
</span><span class="n">total</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="3-use-generators-for-large-datasets">3. Use Generators for Large Datasets</h3>

<p>Generators save memory and can improve performance:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fibonacci_generator</span><span class="p">():</span>
    <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">a</span>
        <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>

<span class="c1"># Memory efficient
</span><span class="n">fib_gen</span> <span class="o">=</span> <span class="nf">fibonacci_generator</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="advanced-optimization-tools">Advanced Optimization Tools</h2>

<h3 id="numpy-for-numerical-computing">NumPy for Numerical Computing</h3>

<p>For numerical operations, NumPy provides significant speedups:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="c1"># Pure Python (slow)
</span><span class="k">def</span> <span class="nf">python_sum</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
    <span class="k">return</span> <span class="nf">sum</span><span class="p">(</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">arr</span><span class="p">)</span>

<span class="c1"># NumPy (fast)
</span><span class="k">def</span> <span class="nf">numpy_sum</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">arr</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>

<span class="c1"># NumPy can be 10-100x faster for numerical operations
</span></code></pre></div></div>

<h3 id="cython-for-critical-sections">Cython for Critical Sections</h3>

<p>Cython can provide near-C performance for Python code:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># fibonacci.pyx
</span><span class="k">def</span> <span class="nf">fibonacci_cython</span><span class="p">(</span><span class="nb">int</span> <span class="n">n</span><span class="p">):</span>
    <span class="n">cdef</span> <span class="nb">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">i</span>
    <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
    <span class="k">return</span> <span class="n">a</span>
</code></pre></div></div>

<h2 id="monitoring-and-metrics">Monitoring and Metrics</h2>

<p>Implement monitoring to track performance in production:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">functools</span>

<span class="k">def</span> <span class="nf">timing_decorator</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
    <span class="nd">@functools.wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">perf_counter</span><span class="p">()</span>
        <span class="n">result</span> <span class="o">=</span> <span class="nf">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="n">end</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">perf_counter</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">func</span><span class="p">.</span><span class="n">__name__</span><span class="si">}</span><span class="s"> took </span><span class="si">{</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="si">:</span><span class="p">.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="s"> seconds</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">result</span>
    <span class="k">return</span> <span class="n">wrapper</span>

<span class="nd">@timing_decorator</span>
<span class="k">def</span> <span class="nf">expensive_operation</span><span class="p">():</span>
    <span class="c1"># Your code here
</span>    <span class="k">pass</span>
</code></pre></div></div>

<h2 id="best-practices">Best Practices</h2>

<ol>
  <li><strong>Profile first, optimize second</strong></li>
  <li><strong>Focus on algorithmic improvements</strong></li>
  <li><strong>Use appropriate data structures</strong></li>
  <li><strong>Consider memory usage</strong></li>
  <li><strong>Test performance changes</strong></li>
</ol>

<p>Remember: premature optimization is the root of all evil. Always measure before and after optimization to ensure improvements.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Python performance optimization is an iterative process. Start with profiling, identify bottlenecks, and apply appropriate techniques. With the right approach, you can achieve significant performance improvements while maintaining Python’s readability and simplicity.</p>

<p>Happy optimizing! 🐍⚡</p>]]></content><author><name>Matteo Ricci</name></author><category term="Python" /><category term="Performance" /><category term="python" /><category term="optimization" /><category term="profiling" /><category term="performance" /><summary type="html"><![CDATA[Discover advanced techniques and tools to improve Python performance, from algorithmic optimizations to profiling and monitoring.]]></summary></entry><entry><title type="html">Building Scalable Django Applications: Best Practices</title><link href="http://0.0.0.0:4001/blog/2025/07/26/building-scalable-django-applications/" rel="alternate" type="text/html" title="Building Scalable Django Applications: Best Practices" /><published>2025-07-26T00:00:00+02:00</published><updated>2025-07-26T00:00:00+02:00</updated><id>http://0.0.0.0:4001/blog/2025/07/26/building-scalable-django-applications</id><content type="html" xml:base="http://0.0.0.0:4001/blog/2025/07/26/building-scalable-django-applications/"><![CDATA[<p>Django is a powerful web framework that enables rapid development, but as your application grows, you need to implement best practices to ensure scalability and maintainability.</p>

<h2 id="architecture-patterns">Architecture Patterns</h2>

<h3 id="model-organization">Model Organization</h3>
<p>Keep your models lean and focused. Use abstract base classes for common fields:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TimestampedModel</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">created_at</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">DateTimeField</span><span class="p">(</span><span class="n">auto_now_add</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">updated_at</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">DateTimeField</span><span class="p">(</span><span class="n">auto_now</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">abstract</span> <span class="o">=</span> <span class="bp">True</span>

<span class="k">class</span> <span class="nc">User</span><span class="p">(</span><span class="n">TimestampedModel</span><span class="p">):</span>
    <span class="n">email</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">EmailField</span><span class="p">(</span><span class="n">unique</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="c1"># other fields...
</span></code></pre></div></div>

<h3 id="service-layer-pattern">Service Layer Pattern</h3>
<p>Separate business logic from views:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># services.py
</span><span class="k">class</span> <span class="nc">UserService</span><span class="p">:</span>
    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">create_user</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="p">):</span>
        <span class="c1"># business logic here
</span>        <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">create_user</span><span class="p">(</span><span class="n">email</span><span class="o">=</span><span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="n">password</span><span class="p">)</span>
        <span class="c1"># send welcome email, etc.
</span>        <span class="k">return</span> <span class="n">user</span>
</code></pre></div></div>

<h2 id="performance-optimization">Performance Optimization</h2>

<h3 id="database-queries">Database Queries</h3>
<ul>
  <li>Use <code class="language-plaintext highlighter-rouge">select_related()</code> and <code class="language-plaintext highlighter-rouge">prefetch_related()</code> to avoid N+1 queries</li>
  <li>Implement database indexing strategically</li>
  <li>Use <code class="language-plaintext highlighter-rouge">only()</code> and <code class="language-plaintext highlighter-rouge">defer()</code> for large models</li>
</ul>

<h3 id="caching-strategy">Caching Strategy</h3>
<p>Implement multi-level caching:</p>
<ul>
  <li>Database query caching with Redis</li>
  <li>Template fragment caching</li>
  <li>Full-page caching for static content</li>
</ul>

<h2 id="testing-strategy">Testing Strategy</h2>

<p>Write comprehensive tests at all levels:</p>
<ul>
  <li>Unit tests for models and utilities</li>
  <li>Integration tests for complex workflows</li>
  <li>End-to-end tests for critical user journeys</li>
</ul>

<p>Following these patterns will help you build Django applications that can handle growth while remaining maintainable.</p>]]></content><author><name>Matteo Ricci</name></author><category term="Django" /><category term="Python" /><category term="Backend" /><category term="django" /><category term="python" /><category term="scalability" /><category term="backend" /><category term="best-practices" /><summary type="html"><![CDATA[Explore advanced patterns and techniques for building maintainable Django applications that can scale with your business needs]]></summary></entry><entry><title type="html">Building Scalable Django Applications: Best Practices</title><link href="http://0.0.0.0:4001/blog/2025/07/26/building-scalable-django-applications/" rel="alternate" type="text/html" title="Building Scalable Django Applications: Best Practices" /><published>2025-07-26T00:00:00+02:00</published><updated>2025-07-26T00:00:00+02:00</updated><id>http://0.0.0.0:4001/blog/2025/07/26/building-scalable-django-applications</id><content type="html" xml:base="http://0.0.0.0:4001/blog/2025/07/26/building-scalable-django-applications/"><![CDATA[<p>Django is a powerful web framework that enables rapid development, but as your application grows, you need to implement best practices to ensure scalability and maintainability.</p>

<h2 id="architecture-patterns">Architecture Patterns</h2>

<h3 id="model-organization">Model Organization</h3>
<p>Keep your models lean and focused. Use abstract base classes for common fields:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TimestampedModel</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">created_at</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">DateTimeField</span><span class="p">(</span><span class="n">auto_now_add</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">updated_at</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">DateTimeField</span><span class="p">(</span><span class="n">auto_now</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">abstract</span> <span class="o">=</span> <span class="bp">True</span>

<span class="k">class</span> <span class="nc">User</span><span class="p">(</span><span class="n">TimestampedModel</span><span class="p">):</span>
    <span class="n">email</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">EmailField</span><span class="p">(</span><span class="n">unique</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="c1"># other fields...
</span></code></pre></div></div>

<h3 id="service-layer-pattern">Service Layer Pattern</h3>
<p>Separate business logic from views:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># services.py
</span><span class="k">class</span> <span class="nc">UserService</span><span class="p">:</span>
    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">create_user</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="p">):</span>
        <span class="c1"># business logic here
</span>        <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">create_user</span><span class="p">(</span><span class="n">email</span><span class="o">=</span><span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="n">password</span><span class="p">)</span>
        <span class="c1"># send welcome email, etc.
</span>        <span class="k">return</span> <span class="n">user</span>
</code></pre></div></div>

<h2 id="performance-optimization">Performance Optimization</h2>

<h3 id="database-queries">Database Queries</h3>
<ul>
  <li>Use <code class="language-plaintext highlighter-rouge">select_related()</code> and <code class="language-plaintext highlighter-rouge">prefetch_related()</code> to avoid N+1 queries</li>
  <li>Implement database indexing strategically</li>
  <li>Use <code class="language-plaintext highlighter-rouge">only()</code> and <code class="language-plaintext highlighter-rouge">defer()</code> for large models</li>
</ul>

<h3 id="caching-strategy">Caching Strategy</h3>
<p>Implement multi-level caching:</p>
<ul>
  <li>Database query caching with Redis</li>
  <li>Template fragment caching</li>
  <li>Full-page caching for static content</li>
</ul>

<h2 id="testing-strategy">Testing Strategy</h2>

<p>Write comprehensive tests at all levels:</p>
<ul>
  <li>Unit tests for models and utilities</li>
  <li>Integration tests for complex workflows</li>
  <li>End-to-end tests for critical user journeys</li>
</ul>

<p>Following these patterns will help you build Django applications that can handle growth while remaining maintainable.</p>]]></content><author><name>Matteo Ricci</name></author><category term="Django" /><category term="Python" /><category term="Backend" /><category term="django" /><category term="python" /><category term="scalability" /><category term="backend" /><category term="best-practices" /><summary type="html"><![CDATA[Explore advanced patterns and techniques for building maintainable Django applications that can scale with your business needs]]></summary></entry><entry><title type="html">React Performance Optimization: From Good to Great</title><link href="http://0.0.0.0:4001/blog/2025/07/25/react-performance-optimization/" rel="alternate" type="text/html" title="React Performance Optimization: From Good to Great" /><published>2025-07-25T00:00:00+02:00</published><updated>2025-07-25T00:00:00+02:00</updated><id>http://0.0.0.0:4001/blog/2025/07/25/react-performance-optimization</id><content type="html" xml:base="http://0.0.0.0:4001/blog/2025/07/25/react-performance-optimization/"><![CDATA[<p>React applications can suffer from performance issues as they grow. Here are proven techniques to keep your apps fast and responsive.</p>

<h2 id="component-optimization">Component Optimization</h2>

<h3 id="reactmemo-for-functional-components">React.memo for Functional Components</h3>
<p>Prevent unnecessary re-renders:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">ExpensiveComponent</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nf">memo</span><span class="p">(({</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">onUpdate</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="si">{</span><span class="nx">data</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nc">Item</span> <span class="na">key</span><span class="p">=</span><span class="si">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">id</span><span class="si">}</span> <span class="na">item</span><span class="p">=</span><span class="si">{</span><span class="nx">item</span><span class="si">}</span> <span class="p">/&gt;)</span><span class="si">}</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<h3 id="usememo-and-usecallback">useMemo and useCallback</h3>
<p>Cache expensive calculations and functions:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">MyComponent</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">items</span><span class="p">,</span> <span class="nx">filter</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">filteredItems</span> <span class="o">=</span> <span class="nf">useMemo</span><span class="p">(()</span> <span class="o">=&gt;</span> 
    <span class="nx">items</span><span class="p">.</span><span class="nf">filter</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;</span> <span class="nx">item</span><span class="p">.</span><span class="nx">category</span> <span class="o">===</span> <span class="nx">filter</span><span class="p">),</span>
    <span class="p">[</span><span class="nx">items</span><span class="p">,</span> <span class="nx">filter</span><span class="p">]</span>
  <span class="p">);</span>

  <span class="kd">const</span> <span class="nx">handleClick</span> <span class="o">=</span> <span class="nf">useCallback</span><span class="p">((</span><span class="nx">id</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// handle click logic</span>
  <span class="p">},</span> <span class="p">[]);</span>

  <span class="k">return</span> <span class="p">&lt;</span><span class="nc">ItemList</span> <span class="na">items</span><span class="p">=</span><span class="si">{</span><span class="nx">filteredItems</span><span class="si">}</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">handleClick</span><span class="si">}</span> <span class="p">/&gt;;</span>
<span class="p">};</span>
</code></pre></div></div>

<h2 id="bundle-optimization">Bundle Optimization</h2>

<h3 id="code-splitting">Code Splitting</h3>
<p>Split your code at route level:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">LazyComponent</span> <span class="o">=</span> <span class="nf">lazy</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="k">import</span><span class="p">(</span><span class="dl">'</span><span class="s1">./LazyComponent</span><span class="dl">'</span><span class="p">));</span>

<span class="kd">function</span> <span class="nf">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Router</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">Suspense</span> <span class="na">fallback</span><span class="p">=</span><span class="si">{</span><span class="p">&lt;</span><span class="nc">Loading</span> <span class="p">/&gt;</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">path</span><span class="p">=</span><span class="s">"/lazy"</span> <span class="na">component</span><span class="p">=</span><span class="si">{</span><span class="nx">LazyComponent</span><span class="si">}</span> <span class="p">/&gt;</span>
      <span class="p">&lt;/</span><span class="nc">Suspense</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Router</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="tree-shaking">Tree Shaking</h3>
<p>Import only what you need:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ❌ Imports entire library</span>
<span class="k">import</span> <span class="o">*</span> <span class="nx">as</span> <span class="nx">lodash</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">lodash</span><span class="dl">'</span><span class="p">;</span>

<span class="c1">// ✅ Imports only needed function</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">debounce</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">lodash</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="virtual-scrolling">Virtual Scrolling</h2>

<p>For large lists, implement virtual scrolling:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">FixedSizeList</span> <span class="nx">as</span> <span class="nx">List</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-window</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">VirtualizedList</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">items</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
  <span class="p">&lt;</span><span class="nc">List</span>
    <span class="na">height</span><span class="p">=</span><span class="si">{</span><span class="mi">600</span><span class="si">}</span>
    <span class="na">itemCount</span><span class="p">=</span><span class="si">{</span><span class="nx">items</span><span class="p">.</span><span class="nx">length</span><span class="si">}</span>
    <span class="na">itemSize</span><span class="p">=</span><span class="si">{</span><span class="mi">50</span><span class="si">}</span>
    <span class="na">itemData</span><span class="p">=</span><span class="si">{</span><span class="nx">items</span><span class="si">}</span>
  <span class="p">&gt;</span>
    <span class="si">{</span><span class="p">({</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">style</span><span class="p">,</span> <span class="nx">data</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
      <span class="p">&lt;</span><span class="nt">div</span> <span class="na">style</span><span class="p">=</span><span class="si">{</span><span class="nx">style</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="nx">data</span><span class="p">[</span><span class="nx">index</span><span class="p">].</span><span class="nx">name</span><span class="si">}</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">)</span><span class="si">}</span>
  <span class="p">&lt;/</span><span class="nc">List</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>These optimizations can dramatically improve your React app’s performance and user experience.</p>]]></content><author><name>Matteo Ricci</name></author><category term="React" /><category term="Performance" /><category term="Frontend" /><category term="react" /><category term="performance" /><category term="optimization" /><category term="frontend" /><summary type="html"><![CDATA[Learn practical techniques to optimize your React applications, from component optimization to bundle splitting strategies]]></summary></entry><entry><title type="html">React Performance Optimization: From Good to Great</title><link href="http://0.0.0.0:4001/blog/2025/07/25/react-performance-optimization/" rel="alternate" type="text/html" title="React Performance Optimization: From Good to Great" /><published>2025-07-25T00:00:00+02:00</published><updated>2025-07-25T00:00:00+02:00</updated><id>http://0.0.0.0:4001/blog/2025/07/25/react-performance-optimization</id><content type="html" xml:base="http://0.0.0.0:4001/blog/2025/07/25/react-performance-optimization/"><![CDATA[<p>React applications can suffer from performance issues as they grow. Here are proven techniques to keep your apps fast and responsive.</p>

<h2 id="component-optimization">Component Optimization</h2>

<h3 id="reactmemo-for-functional-components">React.memo for Functional Components</h3>
<p>Prevent unnecessary re-renders:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">ExpensiveComponent</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nf">memo</span><span class="p">(({</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">onUpdate</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="si">{</span><span class="nx">data</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nc">Item</span> <span class="na">key</span><span class="p">=</span><span class="si">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">id</span><span class="si">}</span> <span class="na">item</span><span class="p">=</span><span class="si">{</span><span class="nx">item</span><span class="si">}</span> <span class="p">/&gt;)</span><span class="si">}</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<h3 id="usememo-and-usecallback">useMemo and useCallback</h3>
<p>Cache expensive calculations and functions:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">MyComponent</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">items</span><span class="p">,</span> <span class="nx">filter</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">filteredItems</span> <span class="o">=</span> <span class="nf">useMemo</span><span class="p">(()</span> <span class="o">=&gt;</span> 
    <span class="nx">items</span><span class="p">.</span><span class="nf">filter</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;</span> <span class="nx">item</span><span class="p">.</span><span class="nx">category</span> <span class="o">===</span> <span class="nx">filter</span><span class="p">),</span>
    <span class="p">[</span><span class="nx">items</span><span class="p">,</span> <span class="nx">filter</span><span class="p">]</span>
  <span class="p">);</span>

  <span class="kd">const</span> <span class="nx">handleClick</span> <span class="o">=</span> <span class="nf">useCallback</span><span class="p">((</span><span class="nx">id</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// handle click logic</span>
  <span class="p">},</span> <span class="p">[]);</span>

  <span class="k">return</span> <span class="p">&lt;</span><span class="nc">ItemList</span> <span class="na">items</span><span class="p">=</span><span class="si">{</span><span class="nx">filteredItems</span><span class="si">}</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">handleClick</span><span class="si">}</span> <span class="p">/&gt;;</span>
<span class="p">};</span>
</code></pre></div></div>

<h2 id="bundle-optimization">Bundle Optimization</h2>

<h3 id="code-splitting">Code Splitting</h3>
<p>Split your code at route level:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">LazyComponent</span> <span class="o">=</span> <span class="nf">lazy</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="k">import</span><span class="p">(</span><span class="dl">'</span><span class="s1">./LazyComponent</span><span class="dl">'</span><span class="p">));</span>

<span class="kd">function</span> <span class="nf">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Router</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">Suspense</span> <span class="na">fallback</span><span class="p">=</span><span class="si">{</span><span class="p">&lt;</span><span class="nc">Loading</span> <span class="p">/&gt;</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">path</span><span class="p">=</span><span class="s">"/lazy"</span> <span class="na">component</span><span class="p">=</span><span class="si">{</span><span class="nx">LazyComponent</span><span class="si">}</span> <span class="p">/&gt;</span>
      <span class="p">&lt;/</span><span class="nc">Suspense</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Router</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="tree-shaking">Tree Shaking</h3>
<p>Import only what you need:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ❌ Imports entire library</span>
<span class="k">import</span> <span class="o">*</span> <span class="nx">as</span> <span class="nx">lodash</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">lodash</span><span class="dl">'</span><span class="p">;</span>

<span class="c1">// ✅ Imports only needed function</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">debounce</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">lodash</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="virtual-scrolling">Virtual Scrolling</h2>

<p>For large lists, implement virtual scrolling:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">FixedSizeList</span> <span class="nx">as</span> <span class="nx">List</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-window</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">VirtualizedList</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">items</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
  <span class="p">&lt;</span><span class="nc">List</span>
    <span class="na">height</span><span class="p">=</span><span class="si">{</span><span class="mi">600</span><span class="si">}</span>
    <span class="na">itemCount</span><span class="p">=</span><span class="si">{</span><span class="nx">items</span><span class="p">.</span><span class="nx">length</span><span class="si">}</span>
    <span class="na">itemSize</span><span class="p">=</span><span class="si">{</span><span class="mi">50</span><span class="si">}</span>
    <span class="na">itemData</span><span class="p">=</span><span class="si">{</span><span class="nx">items</span><span class="si">}</span>
  <span class="p">&gt;</span>
    <span class="si">{</span><span class="p">({</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">style</span><span class="p">,</span> <span class="nx">data</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
      <span class="p">&lt;</span><span class="nt">div</span> <span class="na">style</span><span class="p">=</span><span class="si">{</span><span class="nx">style</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="nx">data</span><span class="p">[</span><span class="nx">index</span><span class="p">].</span><span class="nx">name</span><span class="si">}</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">)</span><span class="si">}</span>
  <span class="p">&lt;/</span><span class="nc">List</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>These optimizations can dramatically improve your React app’s performance and user experience.</p>]]></content><author><name>Matteo Ricci</name></author><category term="React" /><category term="Performance" /><category term="Frontend" /><category term="react" /><category term="performance" /><category term="optimization" /><category term="frontend" /><summary type="html"><![CDATA[Learn practical techniques to optimize your React applications, from component optimization to bundle splitting strategies]]></summary></entry></feed>